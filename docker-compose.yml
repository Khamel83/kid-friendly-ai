version: '3.8'

services:
  # Next.js application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: kid-friendly-ai-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      # AI API Keys (set these in your .env file)
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # Application configuration
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL:-http://localhost:3000}
      - NEXT_PUBLIC_VERCEL_URL=${NEXT_PUBLIC_VERCEL_URL:-http://localhost:3000}
      # Feature flags
      - NEXT_PUBLIC_ENABLE_VOICE_INPUT=${NEXT_PUBLIC_ENABLE_VOICE_INPUT:-true}
      - NEXT_PUBLIC_ENABLE_PARENTAL_CONTROLS=${NEXT_PUBLIC_ENABLE_PARENTAL_CONTROLS:-true}
      - NEXT_PUBLIC_ENABLE_SOUND_EFFECTS=${NEXT_PUBLIC_ENABLE_SOUND_EFFECTS:-true}
      - NEXT_PUBLIC_ENABLE_PATTERN_PUZZLE=${NEXT_PUBLIC_ENABLE_PATTERN_PUZZLE:-true}
      - NEXT_PUBLIC_ENABLE_ANIMAL_QUIZ=${NEXT_PUBLIC_ENABLE_ANIMAL_QUIZ:-true}
      # AI configuration
      - DEFAULT_AI_MODEL=${DEFAULT_AI_MODEL:-google/gemini-2.5-flash-lite}
      - MAX_TOKENS=${MAX_TOKENS:-500}
      - AI_TEMPERATURE=${AI_TEMPERATURE:-0.8}
    volumes:
      - ./public:/app/public:ro
      - ./logs:/app/logs
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: kid-friendly-ai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - app-network
    depends_on:
      - app

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: kid-friendly-ai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/etc/redis/redis.conf:ro
    networks:
      - app-network
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: kid-friendly-ai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - app-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: kid-friendly-ai-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - app-network
    depends_on:
      - prometheus

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16